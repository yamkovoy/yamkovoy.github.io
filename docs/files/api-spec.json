{
  "openapi": "3.0.3",
  "info": {
    "title": "Example User & Partner API",
    "description": "This API handles user data (including a subscription status to a service plan) and partner data. In addition, it allows management of service plans that are tied to particular partners.\n",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://{environment}.example.com/v1",
      "variables": {
        "environment": {
          "default": "api",
          "enum": [
            "api",
            "api.dev",
            "api.staging"
          ]
        }
      }
    }
  ],
  "tags": [
    {
      "name": "User",
      "description": "Operations related to user resources."
    },
    {
      "name": "Partner",
      "description": "Operations related to partner resources."
    },
    {
      "name": "Plan",
      "description": "Operations related to plan resources."
    }
  ],
  "paths": {
    "/api/external/user": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieve User Data",
        "operationId": "getUserData",
        "description": "Retrieves user data, optionally filtered by `user_id`, time window, number of records returned, or `provider_id`.",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "Unique user identifier (7 characters). Optional.",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 7,
              "maxLength": 7,
              "example": "3453255"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Pagination start timestamp in nanoseconds. Optional.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1610000000000000000
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Pagination end timestamp in nanoseconds. Optional.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1620000000000000000
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of records returned (from 10 to 1000). Defaults to 1000 if not specified. Optional.\n",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 10,
              "maximum": 1000,
              "default": 1000,
              "example": 100
            }
          },
          {
            "name": "provider_id",
            "in": "query",
            "description": "Unique identifier of the partner a user is bound to (4 characters). Optional.",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 4,
              "maxLength": 4,
              "example": "2323"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User information retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \"{host}/api/external/user?user_id=5478485&limit=100\"\n"
          }
        ]
      }
    },
    "/api/partner": {
      "get": {
        "tags": [
          "Partner"
        ],
        "summary": "Retrieve Partner Data",
        "operationId": "getPartnerData",
        "description": "Retrieves partner data filtered by the required `provider_id` and optionally by `status`.\n",
        "parameters": [
          {
            "name": "provider_id",
            "in": "query",
            "description": "Unique partner identifier (4 characters). Required.",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 4,
              "maxLength": 4,
              "example": "2323"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Partner's operational state. Optional.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "stopped"
              ],
              "example": "active"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Partner information retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Partner"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Partner not found."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET -H \"Authorization: Basic YXBkdXJlcjphcGlkl2Q=\" \"{host}/api/partner?provider_id=6578\"\n"
          }
        ]
      }
    },
    "/api/partner/{provider_id}/plans": {
      "get": {
        "tags": [
          "Plan"
        ],
        "summary": "List Plans for a Partner",
        "operationId": "listPartnerPlans",
        "description": "Retrieves available service plans for a specific partner. Supports pagination and filtering by user types.\n",
        "security": [],
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "description": "The partner's unique identifier (4 characters). Required.",
            "schema": {
              "type": "string",
              "minLength": 4,
              "maxLength": 4,
              "example": "2323"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Comma-separated list of user types to filter (allowed user types: \"basic\", \"company\", \"advanced\"). Optional.\n",
            "required": false,
            "schema": {
              "type": "string",
              "example": "basic, company"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of plans to return (pagination). Defaults to `50` if not specified. Optional.\n",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Starting index for pagination. Defaults to `0` if not specified. Optional.\n",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Specified Partner's plans retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Plan"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters."
          },
          "404": {
            "description": "Partner not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "post": {
        "tags": [
          "Plan"
        ],
        "summary": "Create a Plan for a Partner",
        "operationId": "createPartnerPlan",
        "description": "Creates a new service plan for a specific partner. The plan can be restricted to specific user types (comma-separated). Basic authorization is required.\n",
        "security": [
          {
            "basicAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Plan creation request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanCreateRequest"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "description": "The partner's unique identifier (4 characters).",
            "schema": {
              "type": "string",
              "minLength": 4,
              "maxLength": 4,
              "example": "2323"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Plan created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plan"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body or parameters"
          },
          "401": {
            "description": "Unauthorized (Basic Auth required)."
          },
          "404": {
            "description": "Partner not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/partner/{provider_id}/plans/{plan_id}": {
      "get": {
        "tags": [
          "Plan"
        ],
        "summary": "Retrieve a Single Plan",
        "operationId": "getPartnerPlan",
        "description": "Retrieves data about a specific plan.",
        "security": [],
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "description": "The partner's unique identifier.",
            "schema": {
              "type": "string",
              "example": "2323"
            }
          },
          {
            "name": "plan_id",
            "in": "path",
            "required": true,
            "description": "The plan's unique identifier.",
            "schema": {
              "type": "string",
              "example": "plan123"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The specified plan.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plan"
                }
              }
            }
          },
          "404": {
            "description": "Plan or partner not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "patch": {
        "tags": [
          "Plan"
        ],
        "summary": "Update a Plan",
        "operationId": "updatePartnerPlan",
        "description": "Updates an existing plan for a specific partner. Basic authorization is required.\n",
        "security": [
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "description": "The partner's unique identifier.",
            "schema": {
              "type": "string",
              "example": "2323"
            }
          },
          {
            "name": "plan_id",
            "in": "path",
            "required": true,
            "description": "The plan's unique identifier.",
            "schema": {
              "type": "string",
              "example": "plan123"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Plan update request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Plan updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plan"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request."
          },
          "401": {
            "description": "Unauthorized (Basic Auth required)."
          },
          "404": {
            "description": "Plan or partner not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "delete": {
        "tags": [
          "Plan"
        ],
        "summary": "Delete a Plan",
        "operationId": "deletePartnerPlan",
        "description": "Deletes an existing plan for a specific partner. Basic authorization is required.\n",
        "security": [
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "description": "The partner's unique identifier.",
            "schema": {
              "type": "string",
              "example": "2323"
            }
          },
          {
            "name": "plan_id",
            "in": "path",
            "required": true,
            "description": "The plan's unique identifier.",
            "schema": {
              "type": "string",
              "example": "plan123"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Plan deleted successfully."
          },
          "401": {
            "description": "Unauthorized (Basic Auth required)."
          },
          "404": {
            "description": "Plan or partner not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "Unique user identifier (7 characters).",
            "example": "3453255"
          },
          "provider_id": {
            "type": "string",
            "description": "Unique identifier of the partner (4 characters).",
            "example": "2323"
          },
          "status": {
            "type": "string",
            "description": "User service state.\n\"signing\" is set when the user is in the process of subscribing to a plan,\nuntil confirmation.\n",
            "enum": [
              "active",
              "inactive",
              "idle",
              "signing"
            ],
            "example": "active"
          },
          "type": {
            "type": "string",
            "description": "User type.",
            "enum": [
              "basic",
              "guest",
              "company",
              "advanced",
              "admin"
            ],
            "example": "basic"
          },
          "zone": {
            "type": "string",
            "description": "Region of residence (two-letter ISO 3166 code).",
            "pattern": "^[a-z]{2}$",
            "example": "us"
          },
          "sub_status": {
            "type": "string",
            "description": "Subscription status. This is read-only and cannot be changed by requests.\n",
            "enum": [
              "signed",
              "unsigned",
              "absent"
            ],
            "example": "unsigned"
          }
        },
        "required": [
          "user_id",
          "status",
          "type",
          "zone",
          "sub_status"
        ]
      },
      "Partner": {
        "type": "object",
        "properties": {
          "provider_id": {
            "type": "string",
            "description": "Unique partner identifier (4 characters).",
            "example": "2323"
          },
          "status": {
            "type": "string",
            "description": "Partner operation state.",
            "enum": [
              "active",
              "stopped"
            ],
            "example": "active"
          }
        },
        "required": [
          "provider_id",
          "status"
        ]
      },
      "Plan": {
        "type": "object",
        "properties": {
          "plan_id": {
            "type": "string",
            "description": "Unique plan identifier.",
            "example": "plan123"
          },
          "name": {
            "type": "string",
            "description": "A descriptive name for the plan.",
            "example": "Premium Monthly"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the plan.",
            "example": "Full access to advanced features"
          },
          "applicable_types": {
            "type": "array",
            "description": "A list of user types this plan applies to.",
            "items": {
              "type": "string",
              "enum": [
                "basic",
                "company",
                "advanced"
              ]
            },
            "example": [
              "basic",
              "company"
            ]
          }
        },
        "required": [
          "plan_id",
          "name",
          "applicable_types"
        ]
      },
      "PlanCreateRequest": {
        "type": "object",
        "properties": {
          "plan_id": {
            "type": "string",
            "description": "Optional unique identifier. If omitted, one may be generated by the server.",
            "example": "plan123"
          },
          "name": {
            "type": "string",
            "description": "A descriptive name for the plan.",
            "example": "Premium Monthly"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the plan.",
            "example": "Full access to advanced features"
          },
          "applicable_types": {
            "type": "array",
            "description": "A list of user types this plan applies to (e.g., \"basic\", \"company\", \"advanced\").",
            "items": {
              "type": "string",
              "enum": [
                "basic",
                "company",
                "advanced"
              ]
            },
            "example": [
              "basic",
              "company"
            ]
          }
        },
        "required": [
          "name",
          "applicable_types"
        ]
      },
      "PlanUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A descriptive name for the plan.",
            "example": "Premium Plus Monthly"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the plan.",
            "example": "Full access with priority support"
          },
          "applicable_types": {
            "type": "array",
            "description": "A list of user types this plan applies to (e.g., \"basic\", \"company\", \"advanced\").",
            "items": {
              "type": "string",
              "enum": [
                "basic",
                "company",
                "advanced"
              ]
            },
            "example": [
              "basic",
              "company"
            ]
          }
        }
      }
    }
  }
}
